// Copyright (C) 1991-2011 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "09/12/2018 21:13:11"
                                                                                
// Verilog Test Bench template for design : uart_sender
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 1 ps/ 1 ps
module uart_sender_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk_in;
reg [7:0] data_in;
reg reset;
reg time025;
// wires                                               
wire data_out;

// assign statements (if any)                          
uart_sender i1 (
// port map - connection between master ports and signals/registers   
	.clk_in(clk_in),
	.data_in(data_in),
	.data_out(data_out),
	.reset(reset),
	.time025(time025)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin
  reset = 0;
  clk_in = 0;
  time025 = 0;
  data_in = 8'b10101010;
  
  #3 reset = 1;
  
  #100 data_in = 8'hff;
                            
  #200 $stop;                                                     
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
  forever #1 clk_in = ~clk_in;                                                       
@eachvec;                                              
// --> end                                             
end

always
begin
	forever
	begin
		#80 time025 = 1;
		#4  time025 = 0;
	end  
end 
                                                    
endmodule

